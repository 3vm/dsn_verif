// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

//`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="moving_average,hls_ip_2019_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a75ti-ftg256-1L,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.278250,HLS_SYN_LAT=12,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=331,HLS_SYN_LUT=378,HLS_VERSION=2019_2}" *)

module moving_average (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_in,
        ap_return
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] data_in;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] data_buf_0;
reg   [31:0] data_buf_3;
reg   [31:0] data_buf_1;
reg   [31:0] data_buf_2;
reg   [31:0] reg_109;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln6_fu_123_p2;
wire   [1:0] ap_phi_mux_i_0_phi_fu_60_p4;
reg   [31:0] reg_114;
reg   [31:0] data_buf_0_load_reg_296;
wire   [1:0] i_2_fu_129_p2;
reg   [1:0] i_2_reg_304;
reg   [31:0] data_buf_3_load_reg_309;
wire   [2:0] i_fu_168_p2;
wire    ap_CS_fsm_state4;
wire   [31:0] sum_fu_224_p2;
wire   [0:0] icmp_ln10_fu_162_p2;
reg   [1:0] i_0_reg_56;
wire    ap_CS_fsm_state3;
reg   [31:0] phi_ln7_reg_68;
reg   [2:0] i_1_reg_79;
reg   [31:0] sum_0_reg_90;
wire   [1:0] trunc_ln11_fu_174_p1;
wire   [0:0] icmp_ln9_2_fu_190_p2;
wire   [0:0] icmp_ln9_1_fu_184_p2;
wire   [0:0] icmp_ln9_fu_178_p2;
wire   [0:0] or_ln9_fu_204_p2;
wire   [31:0] select_ln9_fu_196_p3;
wire   [31:0] select_ln9_1_fu_210_p3;
wire   [31:0] select_ln9_2_fu_216_p3;
wire   [31:0] sub_ln14_fu_238_p2;
wire   [29:0] tmp_fu_244_p4;
wire   [30:0] zext_ln14_fu_254_p1;
wire   [29:0] tmp_1_fu_264_p4;
wire   [0:0] tmp_2_fu_230_p3;
wire   [30:0] sub_ln14_1_fu_258_p2;
wire   [30:0] zext_ln14_1_fu_274_p1;
wire   [30:0] select_ln14_fu_278_p3;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_0_reg_56 <= i_2_reg_304;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_56 <= 2'd3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_162_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        i_1_reg_79 <= i_fu_168_p2;
    end else if (((icmp_ln6_fu_123_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_1_reg_79 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln6_fu_123_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        if ((ap_phi_mux_i_0_phi_fu_60_p4 == 2'd1)) begin
            phi_ln7_reg_68 <= data_buf_0_load_reg_296;
        end else if ((~(ap_phi_mux_i_0_phi_fu_60_p4 == 2'd1) & ~(ap_phi_mux_i_0_phi_fu_60_p4 == 2'd2))) begin
            phi_ln7_reg_68 <= data_buf_2;
        end else if ((ap_phi_mux_i_0_phi_fu_60_p4 == 2'd2)) begin
            phi_ln7_reg_68 <= data_buf_1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_162_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        sum_0_reg_90 <= sum_fu_224_p2;
    end else if (((icmp_ln6_fu_123_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        sum_0_reg_90 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln6_fu_123_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        data_buf_0 <= data_in;
        data_buf_3_load_reg_309 <= data_buf_3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        data_buf_0_load_reg_296 <= data_buf_0;
    end
end

always @ (posedge ap_clk) begin
    if (((i_0_reg_56 == 2'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        data_buf_1 <= phi_ln7_reg_68;
    end
end

always @ (posedge ap_clk) begin
    if (((i_0_reg_56 == 2'd2) & (1'b1 == ap_CS_fsm_state3))) begin
        data_buf_2 <= phi_ln7_reg_68;
    end
end

always @ (posedge ap_clk) begin
    if ((~(i_0_reg_56 == 2'd1) & ~(i_0_reg_56 == 2'd2) & (1'b1 == ap_CS_fsm_state3))) begin
        data_buf_3 <= phi_ln7_reg_68;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln6_fu_123_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_2_reg_304 <= i_2_fu_129_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln6_fu_123_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_phi_mux_i_0_phi_fu_60_p4 == 2'd2) & (icmp_ln6_fu_123_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        reg_109 <= data_buf_1;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln6_fu_123_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | (~(ap_phi_mux_i_0_phi_fu_60_p4 == 2'd1) & ~(ap_phi_mux_i_0_phi_fu_60_p4 == 2'd2) & (icmp_ln6_fu_123_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        reg_114 <= data_buf_2;
    end
end

always @ (*) begin
    if (((icmp_ln10_fu_162_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_fu_162_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln6_fu_123_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln10_fu_162_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_phi_mux_i_0_phi_fu_60_p4 = i_0_reg_56;

assign ap_return = $signed(select_ln14_fu_278_p3);

assign i_2_fu_129_p2 = ($signed(i_0_reg_56) + $signed(2'd3));

assign i_fu_168_p2 = (i_1_reg_79 + 3'd1);

assign icmp_ln10_fu_162_p2 = ((i_1_reg_79 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln6_fu_123_p2 = ((i_0_reg_56 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln9_1_fu_184_p2 = ((trunc_ln11_fu_174_p1 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln9_2_fu_190_p2 = ((trunc_ln11_fu_174_p1 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_178_p2 = ((trunc_ln11_fu_174_p1 == 2'd0) ? 1'b1 : 1'b0);

assign or_ln9_fu_204_p2 = (icmp_ln9_2_fu_190_p2 | icmp_ln9_1_fu_184_p2);

assign select_ln14_fu_278_p3 = ((tmp_2_fu_230_p3[0:0] === 1'b1) ? sub_ln14_1_fu_258_p2 : zext_ln14_1_fu_274_p1);

assign select_ln9_1_fu_210_p3 = ((icmp_ln9_fu_178_p2[0:0] === 1'b1) ? data_in : data_buf_3_load_reg_309);

assign select_ln9_2_fu_216_p3 = ((or_ln9_fu_204_p2[0:0] === 1'b1) ? select_ln9_fu_196_p3 : select_ln9_1_fu_210_p3);

assign select_ln9_fu_196_p3 = ((icmp_ln9_2_fu_190_p2[0:0] === 1'b1) ? reg_114 : reg_109);

assign sub_ln14_1_fu_258_p2 = (31'd0 - zext_ln14_fu_254_p1);

assign sub_ln14_fu_238_p2 = (32'd0 - sum_0_reg_90);

assign sum_fu_224_p2 = (select_ln9_2_fu_216_p3 + sum_0_reg_90);

assign tmp_1_fu_264_p4 = {{sum_0_reg_90[31:2]}};

assign tmp_2_fu_230_p3 = sum_0_reg_90[32'd31];

assign tmp_fu_244_p4 = {{sub_ln14_fu_238_p2[31:2]}};

assign trunc_ln11_fu_174_p1 = i_1_reg_79[1:0];

assign zext_ln14_1_fu_274_p1 = tmp_1_fu_264_p4;

assign zext_ln14_fu_254_p1 = tmp_fu_244_p4;

endmodule //moving_average
