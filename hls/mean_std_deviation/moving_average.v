// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="moving_average,hls_ip_2019_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a75ti-ftg256-1L,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.165250,HLS_SYN_LAT=3,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=164,HLS_SYN_LUT=233,HLS_VERSION=2019_2}" *)

module moving_average (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_in,
        ap_return
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] data_in;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] data_buf_0;
reg   [31:0] data_buf_1;
reg   [31:0] data_buf_0_load_reg_169;
reg   [31:0] data_buf_1_load_reg_175;
wire   [1:0] i_fu_76_p2;
wire    ap_CS_fsm_state2;
wire   [31:0] sum_fu_92_p2;
wire   [0:0] icmp_ln6_fu_70_p2;
reg   [1:0] i_0_reg_40;
reg   [31:0] sum_0_reg_51;
wire   [0:0] trunc_ln7_fu_82_p1;
wire   [31:0] select_ln7_fu_86_p3;
wire   [31:0] sub_ln15_fu_116_p2;
wire   [30:0] lshr_ln15_1_fu_122_p4;
wire   [31:0] zext_ln15_fu_132_p1;
wire   [30:0] lshr_ln15_2_fu_142_p4;
wire   [0:0] tmp_fu_108_p3;
wire   [31:0] sub_ln15_1_fu_136_p2;
wire   [31:0] zext_ln15_1_fu_152_p1;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 data_buf_0 = 32'd0;
#0 data_buf_1 = 32'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln6_fu_70_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_reg_40 <= i_fu_76_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_40 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln6_fu_70_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sum_0_reg_51 <= sum_fu_92_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        sum_0_reg_51 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln6_fu_70_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        data_buf_0 <= data_in;
        data_buf_1 <= data_buf_0_load_reg_169;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        data_buf_0_load_reg_169 <= data_buf_0;
        data_buf_1_load_reg_175 <= data_buf_1;
    end
end

always @ (*) begin
    if (((icmp_ln6_fu_70_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln6_fu_70_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln6_fu_70_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_return = ((tmp_fu_108_p3[0:0] === 1'b1) ? sub_ln15_1_fu_136_p2 : zext_ln15_1_fu_152_p1);

assign i_fu_76_p2 = (i_0_reg_40 + 2'd1);

assign icmp_ln6_fu_70_p2 = ((i_0_reg_40 == 2'd2) ? 1'b1 : 1'b0);

assign lshr_ln15_1_fu_122_p4 = {{sub_ln15_fu_116_p2[31:1]}};

assign lshr_ln15_2_fu_142_p4 = {{sum_0_reg_51[31:1]}};

assign select_ln7_fu_86_p3 = ((trunc_ln7_fu_82_p1[0:0] === 1'b1) ? data_buf_1_load_reg_175 : data_buf_0_load_reg_169);

assign sub_ln15_1_fu_136_p2 = (32'd0 - zext_ln15_fu_132_p1);

assign sub_ln15_fu_116_p2 = (32'd0 - sum_0_reg_51);

assign sum_fu_92_p2 = (select_ln7_fu_86_p3 + sum_0_reg_51);

assign tmp_fu_108_p3 = sum_0_reg_51[32'd31];

assign trunc_ln7_fu_82_p1 = i_0_reg_40[0:0];

assign zext_ln15_1_fu_152_p1 = lshr_ln15_2_fu_142_p4;

assign zext_ln15_fu_132_p1 = lshr_ln15_1_fu_122_p4;

endmodule //moving_average
