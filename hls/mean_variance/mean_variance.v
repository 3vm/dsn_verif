// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mean_variance,hls_ip_2019_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a75ti-ftg256-1L,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.470000,HLS_SYN_LAT=27,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=3,HLS_SYN_FF=312,HLS_SYN_LUT=545,HLS_VERSION=2019_2}" *)

module mean_variance (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_in_address0,
        data_in_ce0,
        data_in_q0,
        data_out_address0,
        data_out_ce0,
        data_out_we0,
        data_out_d0,
        data_out_address1,
        data_out_ce1,
        data_out_we1,
        data_out_d1
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [1:0] data_in_address0;
output   data_in_ce0;
input  [31:0] data_in_q0;
output  [0:0] data_out_address0;
output   data_out_ce0;
output   data_out_we0;
output  [31:0] data_out_d0;
output  [0:0] data_out_address1;
output   data_out_ce1;
output   data_out_we1;
output  [31:0] data_out_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data_in_ce0;
reg data_out_ce0;
reg data_out_we0;
reg data_out_ce1;
reg data_out_we1;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state2;
wire   [2:0] i_fu_180_p2;
reg   [2:0] i_reg_448;
wire   [1:0] trunc_ln7_fu_186_p1;
reg   [1:0] trunc_ln7_reg_453;
wire   [0:0] icmp_ln6_fu_174_p2;
wire   [2:0] i_3_fu_216_p2;
wire    ap_CS_fsm_state4;
wire   [31:0] sum_fu_240_p2;
wire   [0:0] icmp_ln9_fu_210_p2;
wire  signed [31:0] sext_ln13_fu_302_p1;
reg  signed [31:0] sext_ln13_reg_470;
wire   [2:0] i_4_fu_312_p2;
reg   [2:0] i_4_reg_479;
wire    ap_CS_fsm_state5;
wire  signed [31:0] sub_ln15_fu_336_p2;
reg  signed [31:0] sub_ln15_reg_484;
wire   [0:0] icmp_ln14_fu_306_p2;
wire   [31:0] mul_ln15_fu_402_p2;
reg   [31:0] mul_ln15_reg_490;
wire    ap_CS_fsm_state6;
wire   [31:0] sum_2_fu_406_p2;
wire    ap_CS_fsm_state7;
reg   [2:0] i_0_reg_101;
wire    ap_CS_fsm_state3;
reg   [31:0] sum_0_reg_112;
reg   [2:0] i_1_reg_123;
reg   [31:0] sum_1_reg_134;
reg   [2:0] i_2_reg_146;
wire   [63:0] p_0_rec_cast_fu_169_p1;
reg   [31:0] data_buf_3_fu_46;
reg   [31:0] data_buf_3_1_fu_50;
reg   [31:0] data_buf_3_2_fu_54;
reg   [31:0] data_buf_3_3_fu_58;
wire   [1:0] tmp_fu_226_p5;
wire   [31:0] tmp_fu_226_p6;
wire   [31:0] sub_ln13_fu_254_p2;
wire   [29:0] tmp_2_fu_260_p4;
wire   [30:0] zext_ln13_fu_270_p1;
wire   [29:0] tmp_3_fu_280_p4;
wire   [0:0] tmp_6_fu_246_p3;
wire   [30:0] sub_ln13_1_fu_274_p2;
wire   [30:0] zext_ln13_1_fu_290_p1;
wire   [30:0] mean_fu_294_p3;
wire   [1:0] tmp_1_fu_322_p5;
wire   [31:0] tmp_1_fu_322_p6;
wire   [31:0] sub_ln18_fu_349_p2;
wire   [29:0] tmp_4_fu_355_p4;
wire   [30:0] zext_ln18_fu_365_p1;
wire   [29:0] tmp_5_fu_375_p4;
wire   [0:0] tmp_7_fu_341_p3;
wire   [30:0] sub_ln18_1_fu_369_p2;
wire   [30:0] zext_ln18_1_fu_385_p1;
wire   [30:0] variance_fu_389_p3;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
end

mean_variance_muxbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mean_variance_muxbkb_U1(
    .din0(data_buf_3_fu_46),
    .din1(data_buf_3_1_fu_50),
    .din2(data_buf_3_2_fu_54),
    .din3(data_buf_3_3_fu_58),
    .din4(tmp_fu_226_p5),
    .dout(tmp_fu_226_p6)
);

mean_variance_muxbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mean_variance_muxbkb_U2(
    .din0(data_buf_3_fu_46),
    .din1(data_buf_3_1_fu_50),
    .din2(data_buf_3_2_fu_54),
    .din3(data_buf_3_3_fu_58),
    .din4(tmp_1_fu_322_p5),
    .dout(tmp_1_fu_322_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_0_reg_101 <= i_reg_448;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_101 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln6_fu_174_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_1_reg_123 <= 3'd0;
    end else if (((icmp_ln9_fu_210_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        i_1_reg_123 <= i_3_fu_216_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_2_reg_146 <= i_4_reg_479;
    end else if (((icmp_ln9_fu_210_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        i_2_reg_146 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln6_fu_174_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        sum_0_reg_112 <= 32'd0;
    end else if (((icmp_ln9_fu_210_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        sum_0_reg_112 <= sum_fu_240_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sum_1_reg_134 <= sum_2_fu_406_p2;
    end else if (((icmp_ln9_fu_210_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        sum_1_reg_134 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln7_reg_453 == 2'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        data_buf_3_1_fu_50 <= data_in_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln7_reg_453 == 2'd2) & (1'b1 == ap_CS_fsm_state3))) begin
        data_buf_3_2_fu_54 <= data_in_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln7_reg_453 == 2'd3) & (1'b1 == ap_CS_fsm_state3))) begin
        data_buf_3_3_fu_58 <= data_in_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln7_reg_453 == 2'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        data_buf_3_fu_46 <= data_in_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_4_reg_479 <= i_4_fu_312_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_448 <= i_fu_180_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        mul_ln15_reg_490 <= mul_ln15_fu_402_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_fu_210_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        sext_ln13_reg_470 <= sext_ln13_fu_302_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_fu_306_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        sub_ln15_reg_484 <= sub_ln15_fu_336_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln6_fu_174_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        trunc_ln7_reg_453 <= trunc_ln7_fu_186_p1;
    end
end

always @ (*) begin
    if (((icmp_ln14_fu_306_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln14_fu_306_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        data_in_ce0 = 1'b1;
    end else begin
        data_in_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        data_out_ce0 = 1'b1;
    end else begin
        data_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        data_out_ce1 = 1'b1;
    end else begin
        data_out_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln14_fu_306_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        data_out_we0 = 1'b1;
    end else begin
        data_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln14_fu_306_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        data_out_we1 = 1'b1;
    end else begin
        data_out_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln6_fu_174_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln9_fu_210_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln14_fu_306_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign data_in_address0 = p_0_rec_cast_fu_169_p1;

assign data_out_address0 = 64'd0;

assign data_out_address1 = 64'd1;

assign data_out_d0 = sext_ln13_reg_470;

assign data_out_d1 = $signed(variance_fu_389_p3);

assign i_3_fu_216_p2 = (i_1_reg_123 + 3'd1);

assign i_4_fu_312_p2 = (i_2_reg_146 + 3'd1);

assign i_fu_180_p2 = (i_0_reg_101 + 3'd1);

assign icmp_ln14_fu_306_p2 = ((i_2_reg_146 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln6_fu_174_p2 = ((i_0_reg_101 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_210_p2 = ((i_1_reg_123 == 3'd4) ? 1'b1 : 1'b0);

assign mean_fu_294_p3 = ((tmp_6_fu_246_p3[0:0] === 1'b1) ? sub_ln13_1_fu_274_p2 : zext_ln13_1_fu_290_p1);

assign mul_ln15_fu_402_p2 = ($signed(sub_ln15_reg_484) * $signed(sub_ln15_reg_484));

assign p_0_rec_cast_fu_169_p1 = i_0_reg_101;

assign sext_ln13_fu_302_p1 = $signed(mean_fu_294_p3);

assign sub_ln13_1_fu_274_p2 = (31'd0 - zext_ln13_fu_270_p1);

assign sub_ln13_fu_254_p2 = (32'd0 - sum_0_reg_112);

assign sub_ln15_fu_336_p2 = ($signed(tmp_1_fu_322_p6) - $signed(sext_ln13_reg_470));

assign sub_ln18_1_fu_369_p2 = (31'd0 - zext_ln18_fu_365_p1);

assign sub_ln18_fu_349_p2 = (32'd0 - sum_1_reg_134);

assign sum_2_fu_406_p2 = (mul_ln15_reg_490 + sum_1_reg_134);

assign sum_fu_240_p2 = (tmp_fu_226_p6 + sum_0_reg_112);

assign tmp_1_fu_322_p5 = i_2_reg_146[1:0];

assign tmp_2_fu_260_p4 = {{sub_ln13_fu_254_p2[31:2]}};

assign tmp_3_fu_280_p4 = {{sum_0_reg_112[31:2]}};

assign tmp_4_fu_355_p4 = {{sub_ln18_fu_349_p2[31:2]}};

assign tmp_5_fu_375_p4 = {{sum_1_reg_134[31:2]}};

assign tmp_6_fu_246_p3 = sum_0_reg_112[32'd31];

assign tmp_7_fu_341_p3 = sum_1_reg_134[32'd31];

assign tmp_fu_226_p5 = i_1_reg_123[1:0];

assign trunc_ln7_fu_186_p1 = i_0_reg_101[1:0];

assign variance_fu_389_p3 = ((tmp_7_fu_341_p3[0:0] === 1'b1) ? sub_ln18_1_fu_369_p2 : zext_ln18_1_fu_385_p1);

assign zext_ln13_1_fu_290_p1 = tmp_3_fu_280_p4;

assign zext_ln13_fu_270_p1 = tmp_2_fu_260_p4;

assign zext_ln18_1_fu_385_p1 = tmp_5_fu_375_p4;

assign zext_ln18_fu_365_p1 = tmp_4_fu_355_p4;

endmodule //mean_variance
