// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module trace_back (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        n,
        m,
        seq0_address0,
        seq0_ce0,
        seq0_q0,
        subseq_address0,
        subseq_ce0,
        subseq_we0,
        subseq_d0,
        trace_address0,
        trace_ce0,
        trace_q0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] n;
input  [31:0] m;
output  [2:0] seq0_address0;
output   seq0_ce0;
input  [7:0] seq0_q0;
output  [2:0] subseq_address0;
output   subseq_ce0;
output   subseq_we0;
output  [7:0] subseq_d0;
output  [5:0] trace_address0;
output   trace_ce0;
input  [6:0] trace_q0;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg seq0_ce0;
reg[2:0] subseq_address0;
reg subseq_ce0;
reg subseq_we0;
reg[7:0] subseq_d0;
reg trace_ce0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] cnt_fu_143_p2;
reg   [31:0] j_0_load_reg_353;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln63_fu_169_p2;
reg   [31:0] i_0_load_reg_359;
wire   [0:0] or_ln64_fu_193_p2;
wire   [0:0] icmp_ln70_fu_236_p2;
reg   [0:0] icmp_ln70_reg_373;
wire    ap_CS_fsm_state3;
wire   [31:0] cnt_1_fu_309_p2;
wire    ap_CS_fsm_state4;
reg   [31:0] cnt_0_reg_109;
wire  signed [63:0] sext_ln68_fu_231_p1;
wire  signed [63:0] sext_ln71_fu_272_p1;
wire   [2:0] subseq_addr_1_gep_fu_100_p3;
reg   [31:0] j_0_fu_32;
wire   [31:0] j_2_fu_255_p3;
wire   [31:0] grp_fu_132_p2;
reg   [31:0] i_0_fu_36;
wire   [31:0] i_2_fu_248_p3;
wire   [31:0] grp_fu_127_p2;
reg   [31:0] len_1_fu_40;
wire   [31:0] len_fu_293_p2;
reg   [63:0] p_0_idx_fu_44;
wire   [63:0] add_ln71_1_fu_287_p2;
wire   [31:0] add_ln63_fu_137_p2;
wire   [0:0] icmp_ln64_fu_181_p2;
wire   [0:0] icmp_ln64_1_fu_187_p2;
wire   [3:0] trunc_ln68_2_fu_207_p1;
wire   [6:0] sext_ln68_2_cast_fu_211_p3;
wire   [6:0] trunc_ln68_1_fu_203_p1;
wire   [6:0] trunc_ln68_fu_199_p1;
wire   [6:0] sub_ln68_fu_219_p2;
wire   [6:0] add_ln68_fu_225_p2;
wire   [0:0] icmp_ln76_fu_242_p2;
wire  signed [31:0] sext_ln71_fu_272_p0;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        cnt_0_reg_109 <= cnt_1_fu_309_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        cnt_0_reg_109 <= cnt_fu_143_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln70_fu_236_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_fu_36 <= grp_fu_127_p2;
    end else if (((icmp_ln70_fu_236_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_fu_36 <= i_2_fu_248_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_fu_36 <= n;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln70_fu_236_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        j_0_fu_32 <= grp_fu_132_p2;
    end else if (((icmp_ln70_fu_236_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        j_0_fu_32 <= j_2_fu_255_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        j_0_fu_32 <= m;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln70_reg_373 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        len_1_fu_40 <= len_fu_293_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        len_1_fu_40 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln70_reg_373 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        p_0_idx_fu_44 <= add_ln71_1_fu_287_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_0_idx_fu_44 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln63_fu_169_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_load_reg_359 <= i_0_fu_36;
        j_0_load_reg_353 <= j_0_fu_32;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        icmp_ln70_reg_373 <= icmp_ln70_fu_236_p2;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & ((or_ln64_fu_193_p2 == 1'd1) | (icmp_ln63_fu_169_p2 == 1'd0))) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ((or_ln64_fu_193_p2 == 1'd1) | (icmp_ln63_fu_169_p2 == 1'd0)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        seq0_ce0 = 1'b1;
    end else begin
        seq0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        subseq_address0 = subseq_addr_1_gep_fu_100_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        subseq_address0 = p_0_idx_fu_44;
    end else begin
        subseq_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
        subseq_ce0 = 1'b1;
    end else begin
        subseq_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        subseq_d0 = seq0_q0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        subseq_d0 = 8'd0;
    end else begin
        subseq_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln70_reg_373 == 1'd1) & (1'b1 == ap_CS_fsm_state4)) | ((or_ln64_fu_193_p2 == 1'd1) & (icmp_ln63_fu_169_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        subseq_we0 = 1'b1;
    end else begin
        subseq_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        trace_ce0 = 1'b1;
    end else begin
        trace_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & ((or_ln64_fu_193_p2 == 1'd1) | (icmp_ln63_fu_169_p2 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln63_fu_137_p2 = (m + 32'd1);

assign add_ln68_fu_225_p2 = (trunc_ln68_fu_199_p1 + sub_ln68_fu_219_p2);

assign add_ln71_1_fu_287_p2 = (p_0_idx_fu_44 + 64'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_return = len_1_fu_40;

assign cnt_1_fu_309_p2 = ($signed(cnt_0_reg_109) + $signed(32'd4294967295));

assign cnt_fu_143_p2 = (add_ln63_fu_137_p2 + n);

assign grp_fu_127_p2 = ($signed(i_0_load_reg_359) + $signed(32'd4294967295));

assign grp_fu_132_p2 = ($signed(j_0_load_reg_353) + $signed(32'd4294967295));

assign i_2_fu_248_p3 = ((icmp_ln76_fu_242_p2[0:0] === 1'b1) ? grp_fu_127_p2 : i_0_load_reg_359);

assign icmp_ln63_fu_169_p2 = (($signed(cnt_0_reg_109) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln64_1_fu_187_p2 = ((j_0_fu_32 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln64_fu_181_p2 = ((i_0_fu_36 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln70_fu_236_p2 = ((trace_q0 == 7'd68) ? 1'b1 : 1'b0);

assign icmp_ln76_fu_242_p2 = ((trace_q0 == 7'd85) ? 1'b1 : 1'b0);

assign j_2_fu_255_p3 = ((icmp_ln76_fu_242_p2[0:0] === 1'b1) ? j_0_load_reg_353 : grp_fu_132_p2);

assign len_fu_293_p2 = (len_1_fu_40 + 32'd1);

assign or_ln64_fu_193_p2 = (icmp_ln64_fu_181_p2 | icmp_ln64_1_fu_187_p2);

assign seq0_address0 = sext_ln71_fu_272_p1;

assign sext_ln68_2_cast_fu_211_p3 = {{trunc_ln68_2_fu_207_p1}, {3'd0}};

assign sext_ln68_fu_231_p1 = $signed(add_ln68_fu_225_p2);

assign sext_ln71_fu_272_p0 = grp_fu_127_p2;

assign sext_ln71_fu_272_p1 = sext_ln71_fu_272_p0;

assign sub_ln68_fu_219_p2 = (sext_ln68_2_cast_fu_211_p3 - trunc_ln68_1_fu_203_p1);

assign subseq_addr_1_gep_fu_100_p3 = p_0_idx_fu_44;

assign trace_address0 = sext_ln68_fu_231_p1;

assign trunc_ln68_1_fu_203_p1 = i_0_fu_36[6:0];

assign trunc_ln68_2_fu_207_p1 = i_0_fu_36[3:0];

assign trunc_ln68_fu_199_p1 = j_0_fu_32[6:0];

endmodule //trace_back
